#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{hyperref}
\hypersetup{colorlinks=true,urlcolor=blue}
\date{}

\usepackage{xcolor}
\usepackage{listings}

\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{background}{HTML}{F5F5F5}
\definecolor{keyword}{HTML}{4B69C6}
\definecolor{string}{HTML}{448C27}
\definecolor{comment}{HTML}{448C27}

\usepackage{inconsolata}
\lstdefinestyle{mystyle}{
    commentstyle=\color{comment},
    keywordstyle=\color{keyword},
    stringstyle=\color{string},
    basicstyle=\ttfamily,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,
    tabsize=4,
	showlines=true
}

\lstset{style=mystyle}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\shape smallcaps
\size largest
Problem Set 0: Getting Started
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-3mm}
\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Installation:
\series default
 Go through the following installation and getting started steps:
\end_layout

\begin_layout Enumerate

\series bold
Installation:
\series default
 Follow the 
\begin_inset CommandInset href
LatexCommand href
name "intallation guide"
target "https://sites.google.com/view/numeconcph-introprog/guides/installation"
literal "false"

\end_inset

 for 
\emph on
Anaconda
\emph default
, 
\emph on
git
\emph default
 and 
\emph on
VSCode.
\end_layout

\begin_layout Enumerate

\series bold
VSCode+Jupyter:
\series default
 Create a 
\emph on
Jupyter Notebook
\emph default
 in 
\emph on
VSCode.
 
\emph default

\begin_inset Newline newline
\end_inset

Copy in the code below and run it.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

a = 1
\end_layout

\begin_layout Plain Layout

b = 2 
\end_layout

\begin_layout Plain Layout

c = a + b
\end_layout

\begin_layout Plain Layout

print(c)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
More VSCode:
\series default
 Try out the tips for 
\emph on
VSCode 
\emph default
found 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://sites.google.com/view/numeconcph-introprog/guides/vscode"
literal "false"

\end_inset

.
\begin_inset Newline newline
\end_inset

(creating the 
\emph on
Restart-and-Run-All 
\emph default
short cut will be very useful)
\end_layout

\begin_layout Enumerate

\series bold
Git:
\series default
 Download the course content from 
\emph on
VSCode
\emph default
 using 
\emph on
git
\emph default
 as explained 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://sites.google.com/view/numeconcph-introprog/guides/git"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Understanding code:
\series default
 Consider the code snippets below.
 For each, write down your expected outcome on paper.
 Run the code and check whether you were correct.
 
\end_layout

\begin_layout Itemize

\series bold
slicing
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

x = [0,1,2,3,4,5]
\end_layout

\begin_layout Plain Layout

print(x[:2])
\end_layout

\begin_layout Plain Layout

print(x[2:])
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
references
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

x = [1,2,3]
\end_layout

\begin_layout Plain Layout

y = x
\end_layout

\begin_layout Plain Layout

y[-1] = 4
\end_layout

\begin_layout Plain Layout

print(x)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
loops - break
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

for i in range(5):
\end_layout

\begin_layout Plain Layout

	if i >= 2: break
\end_layout

\begin_layout Plain Layout

	print(i)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize

\series bold
loops - continue
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

for i in range(5):
\end_layout

\begin_layout Plain Layout

	if i == 2: continue
\end_layout

\begin_layout Plain Layout

	print(i)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
conditionals
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

x = 3
\end_layout

\begin_layout Plain Layout

if x > 3:
\end_layout

\begin_layout Plain Layout

	print('too big')
\end_layout

\begin_layout Plain Layout

elif x < 1:
\end_layout

\begin_layout Plain Layout

	print('too small')
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

	print('just right')
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
functions and scope
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

a = 1
\end_layout

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

	return x+a # a is global variable
\end_layout

\begin_layout Plain Layout

def g(x,a=1):
\end_layout

\begin_layout Plain Layout

	return x+a # a is local variable
\end_layout

\begin_layout Plain Layout

print(f(1))
\end_layout

\begin_layout Plain Layout

print(g(1))
\end_layout

\begin_layout Plain Layout

a = 2
\end_layout

\begin_layout Plain Layout

print(f(1))
\end_layout

\begin_layout Plain Layout

print(g(1))
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
floating points
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

print(0.1 + 0.2 == 0.3)
\end_layout

\begin_layout Plain Layout

print(0.5 + 0.5 == 1.0)
\end_layout

\begin_layout Plain Layout

print(np.isclose(0.1+0.2,0.3))
\end_layout

\begin_layout Plain Layout

print(np.isclose(1e-200*1e200*1e200*1e-200,1.0))
\end_layout

\begin_layout Plain Layout

print(np.isinf(1e-200*(1e200*1e200)*1e-200))
\end_layout

\begin_layout Plain Layout

print(np.isclose(1e200*(1e-200*1e-200)*1e200,0.0))
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize

\series bold
numpy
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.array([1,2,3])
\end_layout

\begin_layout Plain Layout

y = x
\end_layout

\begin_layout Plain Layout

x += 1
\end_layout

\begin_layout Plain Layout

x[:] = x + 1
\end_layout

\begin_layout Plain Layout

x = x + 1
\end_layout

\begin_layout Plain Layout

print(y)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
classes
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python,basicstyle=
\backslash
linespread{1.3}
\backslash
ttfamily
\backslash
footnotesize,numbers=left,frame=single,backgroundcolor=
\backslash
color{background}]
\end_layout

\begin_layout Plain Layout

class SquareClass:
\end_layout

\begin_layout Plain Layout

	def __init__(self,length,width):
\end_layout

\begin_layout Plain Layout

		self.length = length
\end_layout

\begin_layout Plain Layout

		self.width = width
\end_layout

\begin_layout Plain Layout

	def size(self):
\end_layout

\begin_layout Plain Layout

		return self.length*self.width
\end_layout

\begin_layout Plain Layout

square = SquareClass(2,2)
\end_layout

\begin_layout Plain Layout

print(square.size())
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
